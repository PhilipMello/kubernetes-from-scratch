---
- name: Load Kernel Modules for containerd
  hosts: k8s
  become: yes
  tasks:
    - name: Create containerd modules configuration file
      ansible.builtin.copy:
        dest: /etc/modules-load.d/containerd.conf
        content: |
          overlay
          br_netfilter
        mode: '0644'

    - name: Load overlay module
      ansible.builtin.command:
        cmd: modprobe overlay

    - name: Load br_netfilter module
      ansible.builtin.command:
        cmd: modprobe br_netfilter

---
- name: Configure sysctl parameters for Kubernetes
  hosts: k8s
  become: yes
  tasks:
    - name: Create sysctl configuration file
      ansible.builtin.copy:
        dest: /etc/sysctl.d/99-kubernetes-cri.conf
        content: |
          net.bridge.bridge-nf-call-iptables  = 1
          net.ipv4.ip_forward                 = 1
          net.bridge.bridge-nf-call-ip6tables = 1
        mode: '0644'

    - name: Apply sysctl settings
      ansible.builtin.sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        state: present
        sysctl_file: /etc/sysctl.d/99-kubernetes-cri.conf
      loop:
        - { name: "net.bridge.bridge-nf-call-iptables", value: "1" }
        - { name: "net.ipv4.ip_forward", value: "1" }
        - { name: "net.bridge.bridge-nf-call-ip6tables", value: "1" }

    - name: Apply sysctl settings immediately
      ansible.builtin.command:
        cmd: sysctl --system

---
- name: Add Docker's Official GPG Key
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install required packages for Docker GPG key
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
        state: present

    - name: Create directory for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Docker GPG key and save it
      ansible.builtin.get_url:
        url: https://download.docker.com/linux/ubuntu/gpg
        dest: /etc/apt/keyrings/docker.asc
        mode: '0644'

    - name: Set appropriate permissions for Docker GPG key
      ansible.builtin.file:
        path: /etc/apt/keyrings/docker.asc
        mode: '0644'

---
- name: Add Docker Repository to APT sources
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Add Docker repository to APT sources
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/docker.list
        line: "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu $(. /etc/os-release && echo \"${UBUNTU_CODENAME:-$VERSION_CODENAME}\") stable"
        create: yes
        mode: '0644'

    - name: Update apt cache after adding Docker repository
      ansible.builtin.apt:
        update_cache: yes

---
- name: Install containerd.io
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install containerd.io package
      ansible.builtin.apt:
        name: containerd.io
        state: present
        force: yes

---
- name: Generate containerd default configuration
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Create containerd configuration directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory
        mode: '0755'

    - name: Generate containerd default configuration
      ansible.builtin.command:
        cmd: containerd config default
      register: containerd_config

    - name: Save default containerd configuration to /etc/containerd/config.toml
      ansible.builtin.copy:
        content: "{{ containerd_config.stdout }}"
        dest: /etc/containerd/config.toml
        mode: '0644'

---
- name: Enable SystemdCgroup in containerd configuration
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Enable SystemdCgroup in containerd config
      ansible.builtin.lineinfile:
        path: /etc/containerd/config.toml
        regexp: '^SystemdCgroup = false'
        line: 'SystemdCgroup = true'
        backup: yes

---
- name: Restart containerd service to apply configuration changes
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Restart containerd service
      ansible.builtin.systemd:
        name: containerd
        state: restarted
        enabled: yes

---
- name: Add Kubernetes APT GPG Key
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Download Kubernetes APT GPG key and store it
      ansible.builtin.get_url:
        url: https://pkgs.k8s.io/core:/stable:/v1.33/deb/Release.key
        dest: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
        mode: '0644'

---
- name: Add Kubernetes Repository to APT sources list
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Add Kubernetes repository to APT sources
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.33/deb/ /'
        create: yes
        mode: '0644'

---
- name: Install Kubernetes components (kubelet, kubeadm, kubectl)
  hosts: ubuntu_machines
  become: yes
  tasks:
    - name: Update apt cache
      ansible.builtin.apt:
        update_cache: yes

    - name: Install kubelet, kubeadm, and kubectl
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: present

    - name: Mark kubelet, kubeadm, and kubectl to be held
      ansible.builtin.apt:
        name:
          - kubelet
          - kubeadm
          - kubectl
        state: held

---
- name: Initialize Kubernetes master node with kubeadm
  hosts: master_node
  become: yes
  tasks:
    - name: Initialize Kubernetes master node with kubeadm
      ansible.builtin.command:
        cmd: kubeadm init --pod-network-cidr=10.244.0.0/16
      register: kubeadm_init_output
      ignore_errors: yes

    - name: Save kubeadm init output to log file
      ansible.builtin.copy:
        content: "{{ kubeadm_init_output.stdout }}"
        dest: /root/kubeadm-init-output.log
        mode: '0644'

---
- name: Save the kubeadm join command for worker nodes
  hosts: master_node
  become: yes
  tasks:
    - name: Create and save kubeadm join command
      ansible.builtin.command:
        cmd: kubeadm token create --print-join-command
      register: join_command

    - name: Save join command to /root/join.txt
      ansible.builtin.copy:
        content: "{{ join_command.stdout }}"
        dest: /root/join.txt
        mode: '0644'

---
- name: Apply Calico CNI network plugin
  hosts: master_node
  become: yes
  tasks:
    - name: Apply Calico CNI plugin using kubectl
      ansible.builtin.command:
        cmd: kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.30.0/manifests/calico.yaml
